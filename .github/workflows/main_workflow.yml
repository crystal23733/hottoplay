name: Release to Test-Main Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - "test-main"

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  docker-build-test:
    runs-on: ubuntu-latest
    if: startsWith(github.head_ref, 'release/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref }}
        fetch-depth: 0

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and Push Docker Image
      id: docker_build
      run: |
        cd server
        if ! docker-compose build; then
          echo "::set-output name=build_status::failed"
          echo "::set-output name=error_message::$(docker-compose build 2>&1)"
          exit 1
        fi
        if ! docker-compose push; then
          echo "::set-output name=push_status::failed"
          echo "::set-output name=error_message::$(docker-compose push 2>&1)"
          exit 1
        fi
        echo "::set-output name=status::success"

    - name: Create Issue on Failure
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const errorMessage = steps.docker_build.outputs.error_message || 'Unknown error';
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Docker Build/Push Failed',
            body: `Docker build or push failed for PR #${context.payload.pull_request.number}
            
            Error details:
            \`\`\`
            ${errorMessage}
            \`\`\`
            
            Please check the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for more details.`,
            labels: ['docker-build-failed', 'bug']
          });

  auto-merge:
    needs: docker-build-test
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.ref }}
        fetch-depth: 0
    
    - name: Auto Merge PR
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const PullRequestService = require('./.github/actions/services/PullRequestService');
          const MergeService = require('./.github/actions/services/MergeService');

          async function run() {
            const prService = new PullRequestService(github, context);
            const mergeService = new MergeService(github, context);

            try {
              const { data: pullRequest } = await prService.getPullRequest(context.payload.pull_request.number);
              const validation = prService.validatePullRequest(pullRequest);
              await mergeService.mergePullRequest(context.payload.pull_request.number, validation);
              
              console.log(`PR #${context.payload.pull_request.number} merged successfully`);
            } catch (error) {
              console.error('Merge process error:', error);
              core.setFailed(error.message);
            }
          }

          run();