name: Release to Test-Main Workflow

on:
  pull_request:
    branches:
      - "test-main"
  push:
    branches:
      - "test-main"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: Install dependencies (Next.js)
      run: |
        cd client
        npm ci --legacy-peer-deps

    - name: Build Next.js application
      run: |
        cd client
        npm run build

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Build Go application
      run: |
        cd server
        go build -v ./...

    - name: Run Go tests
      run: |
        cd server
        go test -v ./...

  auto-merge:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Auto Merge PR
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const PullRequestService = require('./.github/actions/services/PullRequestService');
          const MergeService = require('./.github/actions/services/MergeService');

          async function run() {
            const prService = new PullRequestService(github, context);
            const mergeService = new MergeService(github, context);

            try {
              const { data: pullRequest } = await prService.getPullRequest(context.payload.pull_request.number);
              const validation = prService.validatePullRequest(pullRequest);
              await mergeService.mergePullRequest(context.payload.pull_request.number, validation);
              
              console.log(`PR #${context.payload.pull_request.number} merged successfully`);
            } catch (error) {
              console.error('Merge process error:', error);
              core.setFailed(error.message);
            }
          }

          run();

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: test-main
        fetch-depth: 0

    - name: Fetch latest changes
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"
        git pull origin test-main
        echo "Current commit: $(git rev-parse HEAD)"
        echo "Latest commit message: $(git log -1 --pretty=%B)"

    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker Image
      run: |
        cd server
        if ! docker-compose build; then
          echo "Docker build failed"
          exit 1
        fi
        echo "Docker build successful at $(date '+%Y-%m-%d %H:%M:%S')"
        docker images --format "{{.Repository}}:{{.Tag}} - Created: {{.CreatedAt}}"

    - name: Push Docker Image
      if: success()
      run: |
        cd server
        if ! docker-compose push; then
          echo "Docker push failed"
          exit 1
        fi
        echo "Docker push successful at $(date '+%Y-%m-%d %H:%M:%S')"

    - name: Image Build Info
      if: success()
      run: |
        echo "=== Docker Image Build Information ==="
        docker images --format "{{.Repository}}:{{.Tag}} - Size: {{.Size}} - Created: {{.CreatedAt}}"

    - name: Notify Build Status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "Docker build and push completed successfully"
        else
          echo "Docker build or push failed"
          exit 1
        fi