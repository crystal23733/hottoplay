name: Feature to Develop Automation Workflow

on:
  pull_request:
    branches:
      - "develop"

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: Install dependencies (Next.js)
      run: |
        cd client
        npm ci

    - name: Build Next.js application
      run: |
        cd client
        npm run build

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Build Go application
      run: |
        cd server
        go build -v ./...

    - name: Run Go tests
      run: |
        cd server
        go test -v ./...

  auto-merge:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check PR Conflicts
      id: check-conflicts
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const pullRequestNumber = context.payload.pull_request.number;

          try {
            const { data: pullRequest } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: pullRequestNumber
            });

            // 기본 브랜치 확인
            const validBases = ['develop'];
            const validHeads = ['feature/'];

            // PR 병합 가능성 확인
            const isConflicting = await github.rest.pulls.checkMergeability({
              owner,
              repo,
              pull_number: pullRequestNumber
            });

            console.log('Merge Possible:', isConflicting.data.mergeable);
            console.log('Merge State:', isConflicting.data.mergeable_state);

            // 조건 체크
            const baseCheck = validBases.includes(pullRequest.base.ref);
            const headCheck = validHeads.some(prefix => pullRequest.head.ref.startsWith(prefix));
            const mergeCheck = isConflicting.data.mergeable && isConflicting.data.mergeable_state === 'clean';

            if (baseCheck && headCheck && mergeCheck) {
              console.log('PR is ready to merge');
              return true;
            } else {
              console.log('PR merge conditions not met:');
              if (!baseCheck) console.log('- Invalid base branch');
              if (!headCheck) console.log('- Invalid head branch');
              if (!mergeCheck) console.log('- Not mergeable or unstable state');
              return false;
            }
          } catch (error) {
            console.error('Merge check error:', error);
            return false;
          }

    - name: Merge Pull Request
      if: steps.check-conflicts.outputs.result == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const pullRequestNumber = context.payload.pull_request.number;

          try {
            await github.rest.pulls.merge({
              owner,
              repo,
              pull_number: pullRequestNumber,
              merge_method: "squash"
            });
            console.log(`PR #${pullRequestNumber} merged successfully`);
          } catch (error) {
            console.error('Merge failed:', error);
            core.setFailed('Merge operation failed');
          }