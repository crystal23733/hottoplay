name: Monorepo CI/CD Workflow

on:
  push:
    branches:
      - "develop" # develop 브랜치에 push 시 실행
  pull_request:
    branches:
      - "develop" # develop 브랜치로 PR 생성 시 실행
      - "main"    # main 브랜치로 PR 생성 시 실행

jobs:
  build-go:
    runs-on: ubuntu-latest # Go 서버 빌드를 위한 환경 설정
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 코드 체크아웃

    - name: Set up Go
      uses: actions/setup-go@v4 # Go 환경 설정
      with:
        go-version: '1.23' # 사용할 Go 버전

    - name: Build Go application
      run: |
        cd server # 서버 디렉토리로 이동
        go build -v ./... # 빌드 실행

  build-next:
    runs-on: ubuntu-latest # Next.js 클라이언트를 위한 환경 설정
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 코드 체크아웃

    - name: Set up Node.js
      uses: actions/setup-node@v3 # Node.js 환경 설정
      with:
        node-version: '22' # 사용할 Node.js 버전

    - name: Install dependencies
      run: |
        cd client # 클라이언트 디렉토리로 이동
        npm ci # 의존성 설치

    - name: Build Next.js application
      run: |
        cd client # 클라이언트 디렉토리로 이동
        npm run build # Next.js 빌드

  auto-merge:
    needs: [build-go, build-next] # 두 작업이 성공해야 실행
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 코드 체크아웃

    - name: Auto-merge PR into main or develop
      uses: actions/github-script@v6
      with:
        script: |
          const { data: pullRequest } = await github.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number
          });

          // 조건: PR 대상이 main 또는 develop이고, source 브랜치가 develop 또는 release
          const validBases = ['main', 'develop'];
          const validHeads = ['develop', 'release'];

          if (
            validBases.includes(pullRequest.base.ref) &&
            validHeads.includes(pullRequest.head.ref) &&
            pullRequest.mergeable &&
            pullRequest.mergeable_state === 'clean'
          ) {
            await github.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              merge_method: "squash" // "merge", "squash", 또는 "rebase" 선택 가능
            });
            console.log(`PR #${pullRequest.number} merged into ${pullRequest.base.ref}`);
          } else {
            console.log(`PR #${pullRequest.number} does not meet merge criteria.`);
            core.setFailed("Merge criteria not met.");
          }