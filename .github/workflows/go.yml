name: Feature to Develop Automation Workflow

on:
  pull_request:
    branches:
      - "develop" # develop 브랜치로 PR 생성 시 실행

jobs:
  build-and-test:
    runs-on: ubuntu-latest # 워크플로 실행 환경

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 코드 체크아웃

    - name: Set up Node.js
      uses: actions/setup-node@v3 # Node.js 환경 설정
      with:
        node-version: '22'

    - name: Install dependencies (Next.js)
      run: |
        cd client
        npm ci # 의존성 설치

    - name: Build Next.js application
      run: |
        cd client
        npm run build # Next.js 빌드

    - name: Set up Go
      uses: actions/setup-go@v4 # Go 환경 설정
      with:
        go-version: '1.23' # 사용할 Go 버전

    - name: Build Go application
      run: |
        cd server
        go build -v ./... # Go 서버 빌드

    - name: Run Go tests
      run: |
        cd server
        go test -v ./... # Go 테스트 실행

  auto-merge:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # 코드 체크아웃

    - name: Auto-merge PR into develop
      uses: actions/github-script@v7  # 최신 버전으로 업데이트
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}  # GitHub에서 자동으로 제공되는 토큰 사용
        script: |
          const { owner, repo } = context.repo;
          const pullRequestNumber = context.payload.pull_request.number;

          try {
            // PR 정보 가져오기
            const { data: pullRequest } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: pullRequestNumber
            });

            // 조건: PR 대상이 develop이고, source 브랜치가 feature/로 시작
            const validBases = ['develop'];
            const validHeads = ['feature/'];

            if (
              validBases.includes(pullRequest.base.ref) &&
              validHeads.some(prefix => pullRequest.head.ref.startsWith(prefix)) &&
              pullRequest.mergeable &&
              pullRequest.mergeable_state === 'clean'
            ) {
              // PR 병합
              await github.rest.pulls.merge({
                owner,
                repo,
                pull_number: pullRequestNumber,
                merge_method: "squash"
              });
              console.log(`PR #${pullRequestNumber} merged into ${pullRequest.base.ref}`);
            } else {
              console.log(`PR #${pullRequestNumber} does not meet merge criteria.`);
              core.setFailed("Merge criteria not met.");
            }
          } catch (error) {
            console.error('Merge failed:', error);
            core.setFailed(error.message);
          }