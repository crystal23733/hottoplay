name: Feature to Develop Automation Workflow

on:
  pull_request:
    branches:
      - "develop"

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: Install dependencies (Next.js)
      run: |
        cd client
        npm ci

    - name: Build Next.js application
      run: |
        cd client
        npm run build

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Build Go application
      run: |
        cd server
        go build -v ./...

    - name: Run Go tests
      run: |
        cd server
        go test -v ./...

  auto-merge:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Detailed Merge Check
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { owner, repo } = context.repo;
          const pullRequestNumber = context.payload.pull_request.number;

          try {
            // PR 정보 가져오기
            const { data: pullRequest } = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: pullRequestNumber
            });

            // 조건: PR 대상이 develop이고, source 브랜치가 feature/로 시작
            const validBases = ['develop'];
            const validHeads = ['feature/'];

            console.log('Base Branch:', pullRequest.base.ref);
            console.log('Head Branch:', pullRequest.head.ref);
            console.log('Mergeable:', pullRequest.mergeable);
            console.log('Mergeable State:', pullRequest.mergeable_state);

            const baseCheck = validBases.includes(pullRequest.base.ref);
            const headCheck = validHeads.some(prefix => pullRequest.head.ref.startsWith(prefix));

            console.log('Base Branch Check:', baseCheck);
            console.log('Head Branch Check:', headCheck);

            if (
              baseCheck &&
              headCheck &&
              pullRequest.mergeable &&
              pullRequest.mergeable_state === 'clean'
            ) {
              // PR 병합
              await github.rest.pulls.merge({
                owner,
                repo,
                pull_number: pullRequestNumber,
                merge_method: "squash"
              });
              console.log(`PR #${pullRequestNumber} merged into ${pullRequest.base.ref}`);
            } else {
              console.log(`PR #${pullRequestNumber} does not meet merge criteria.`);
              console.log('Detailed Failure Reasons:');
              if (!baseCheck) console.log('- Base branch is not "develop"');
              if (!headCheck) console.log('- Head branch does not start with "feature/"');
              if (!pullRequest.mergeable) console.log('- PR is not mergeable');
              if (pullRequest.mergeable_state !== 'clean') console.log('- Mergeable state is not "clean"');
              
              core.setFailed("Merge criteria not met.");
            }
          } catch (error) {
            console.error('Merge check failed:', error);
            core.setFailed(error.message);
          }